services:
  db:
    image: postgres:15-alpine
    container_name: my-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  backend:
    build:
      context: ./backend
      # You can specify a Dockerfile if it isn’t named "Dockerfile":
      # dockerfile: Dockerfile
    container_name: backend
    depends_on:
      - db
    environment:
      # Example: setting the DATABASE_URL so that your Rust app (via Diesel) can connect to Postgres
      DATABASE_URL: postgres://postgres:postgres@db:5432/mydb
      SERVER_ADDRESS: 0.0.0.0:8000
    ports:
      - "8000:8000"
    # Uncomment or adjust the command if your image does not have a default command
    # command: ["cargo", "run", "--release"]

  frontend:
    build:
      context: ./frontend
      # If you have a custom Dockerfile name, specify it here:
      # dockerfile: Dockerfile
    container_name: frontend
    depends_on:
      - backend
    environment:
      # For example, letting the frontend know where the API is:
      REACT_APP_BACKEND_URL: http://backend:8000/api
    ports:
      - "3000:3000"
    # For a production build you might instead serve the static assets,
    # but here we assume you’re running a dev server:
    # command: ["npm", "run", "dev"]

  nginx:
    image: nginx:alpine
    container_name: nginx
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"
    volumes:
      # Mount a custom Nginx configuration file (create ./nginx/nginx.conf)
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      # Optionally, if you are building a production version of the frontend,
      # you could mount the build output to serve static files:
      #- ./frontend/dist:/usr/share/nginx/html:ro

volumes:
  postgres_data:
